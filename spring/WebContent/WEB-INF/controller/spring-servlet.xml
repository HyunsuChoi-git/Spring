<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd"
	>
	<!-- 다운로드 빈 클래스 세팅
		컴파일 순서상 다운로드가 최우선순위여야 한다.(서비스 할 때 필요요소를 미리 다운받게 해주기 위해)
		﻿다운로드는 다운받는 창을 별도로 만들 것임. 다운로드만 하고 페이지 이동은 없음
		BeanNameViewResolver 는 새로운 창을 구성할 때 우선순위를 주기위해 사용.
		지정하지 않으면 다운로드 도중에 이동 먼저 처리하려함.
	 -->
	<bean id="fileDown" class="test.spring.bean.DownloadView" />
	
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />
		<!-- view 에대한 우선순위를 지정하는 옵션. 
		다운로드는 페이지 이동 전에 다운로드 창이 뜨게 하기 위해, 반드시 우선순위0으로 지정하고,
		view를 담당하는 ViewResolver에는 0보다 우선순위가 낮은 1을 지정해준다. -->
	</bean>
	
	<!-- 빈클래스가 호출 가능하게 컨트롤러에 세팅
		HelloBean hello = new HelloBean();
		과 같다.
	<bean id="hello" class="test.spring.bean.HelloBean" />
	<bean id="test" class="test.spring.bean.TestBean" />
	 -->
	 
	 <!-- 특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스를 생성한다. -->
	 <context:component-scan base-package="test" />
	 
	 <!-- bean 태그  :  객체생성 태그. 
	 jsp:useBean과 비슷하지만 useBean은 기본생성자만 호출하여 생성이 가능.
	 bean 태그는 매개변수를 가지고 있는 생성자 호출도 가능하다. -->
	 <bean id="day" class="java.util.Date" />
	 <!-- name =>  setId() / value => 값 (기본형인 문자와 숫자만 가능) / ref  => 참조형(객체)-->
 	 <bean id="dto" class="test.spring.model.TestDTO" >
	 	<property name="id" value="iiiid" />
	 	<property name="pw" value="pass" />
	 	<property name="reg" ref="day" />
	 </bean>
	
	<!-- 생성자 호출 -->
	<bean id="dto2" class="test.spring.model.TestDTO" >
		<constructor-arg value="testID"/>
		<constructor-arg value="testPW"/>
		<constructor-arg ref="day"/>
	</bean>
	
	
	<!--  
		ex) DTO
		public class DTO{
			private String id;
			private String pw;
			
			....
			public DTO(){}
			public DTO(String id, String pw){ .... }
			
			public DTO(String url, boolean play, long num1, int num2){ .... }
			
			....get()/set()
			
		}
	 type : 
	  태그만 봤을 때, 전부다 문자열..
	 <bean id="dto3" class="test.spring.model.DTO">
	 	<constructor-arg type="java.lang.String" value="http://naver.com" />
	 	<constructor-arg type="boolean" value="true" />
	 	<constructor-arg type="long" value="100" />
	 	<constructor-arg type="int" value="10" />
	 </bean>
	 
	  index는 0부터 시작한다.
	 <bean id="dto3" class="test.spring.model.TestDTO">
	 	<constructor-arg index="1" value="1234"/> ㅡㅡ> id 
	 	<constructor-arg index="0" value="testID"/> ㅡㅡ> pw 
	 </bean>
	 
	   name : 반드시 매개변수의 이름으로 지정해준다.
	 <bean id="dto3" class="test.spring.model.DTO">
	 	<constructor-arg name="url" value="http://naver.com" />
	 	<constructor-arg name="paly" value="true" />
	 	<constructor-arg name="num1" value="100" />
	 	<constructor-arg name="num2" value="10" />
	 </bean>
	 -->
	
	
	<!-- ﻿ViewResolver 세팅 
		prefix : 접두어
		suffix : 접미어
	-->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1"/>
	</bean>
	
	<!-- 파일 업로드  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="-1" /> <!-- -1은 업로드 크기 제한 없음을 의미 -->
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
		
	<!-- mybatis 세팅 -->
	<!-- dataSource  :  DB 데이터 소스
		DB 커넥션 정보 DataSource 타입
	 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
		p:driverClassName="oracle.jdbc.driver.OracleDriver"
		p:url="jdbc:oracle:thin:@192.168.0.252:1521:orcl"
		p:username="java17"
		p:password="java17"
	 />
	 
	 <!-- 커넥션 풀 역할 
	 	db연결 정보:dataSource, 맵퍼 위치와 typeAlias에 대한 정보 : mybatis-config.xml에 설정할 것임.
	 	커넥션 connextion == session 
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/mybatis/mybatis-config.xml" />
	</bean>
	
	<!-- sql문을 날릴 때 필요한 아이 
		@Autowierd해서 아래 빈을 가져다 사용하게 됨
		destroy-method="clearCache"  :  종료시 무엇을 할 지 지정하는 속성. => mybatis장점
	-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache" >
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
</beans>